#!/usr/bin/python

import argparse

parser = argparse.ArgumentParser(
        description='A simple script to create an eits wallpaper'
        )

parser.add_argument(
        'width',
        help='Wallpaper width',
        type=int
        )

parser.add_argument(
        'height',
        help='Wallpaper height',
        type=int
        )

parser.add_argument(
        'username',
        help='Wallpaper username',
        type=str
        )

from PIL import Image, ImageDraw, ImageFont

def write_shadow(img: Image.Image) -> Image.Image:
    size = img.size
    shadow = False

    ### Loop through the diagonal ###
    start_x = 0
    for start_x in range(size[0]):
        y = 0
        for x in range(start_x, size[0]):
            if y > size[1]-1:
                continue
            axis = (x, y)
            if not img.getpixel(axis) == (34, 40, 49, 255):
                shadow = True
            if shadow and img.getpixel(axis) == (34, 40, 49, 255):
                img.putpixel(axis, (0, 0, 0, 255))
            y += 1
        shadow = False

    start_y = 0
    for start_y in range(size[1]):
        x = 0
        for y in range(start_y, size[1]):
            if x > size[0]-1:
                continue
            axis = (x, y)
            if not img.getpixel(axis) == (34, 40, 49, 255):
                shadow = True
            if shadow and img.getpixel(axis) == (34, 40, 49, 255):
                img.putpixel(axis, (0, 0, 0, 255))
            x += 1
        shadow = False
    ### Loop through the diagonal ###

    return img

def write_text(text: str, font_size: float,
        img, top_gap: float, left_gap: float) -> None:

    size = int(width*font_size)
    font = ImageFont.truetype(FONT, size)
    axis = font.getsize(text)

    x = int(width*left_gap - (axis[0]//2))
    y = int(height*top_gap - (axis[1])//2)

    axis = (x, y)
    img.text(axis, text, fill = FG, font=font)

def write_image(wallpaper: Image.Image, img: Image.Image,
        left_gap: float, top_gap:float) -> None:
    axis = img.size
    axis = (int(width*left_gap - (axis[0]//2)), int(height*top_gap - (axis[1])//2))
    wallpaper.alpha_composite(img, axis)

def resize_image(ratio: float, img: Image.Image) -> Image.Image:
    size = int(img.size[0] * ratio), int(img.size[1] * ratio)
    img = img.resize(size)
    return img

def draw_border(gap: float, border: float,
        wallpaper, color: str,
        shadow_gap: float = 0) -> None:
    gap = int(max(width * gap, height * gap))
    shadow_gap = int(max(width * shadow_gap, height * shadow_gap))
    axis = (gap, gap, width - gap, height - gap)
    axis = (axis[0] + shadow_gap, axis[1] + shadow_gap,
            axis[2] + shadow_gap, axis[3] + shadow_gap)
    wallpaper.rectangle(axis, outline=color, width=int(width*border))

### Settings ###

FONT = './robotMono/RobotoMono-Regular.ttf'

# Colors
BG = '#222831' # (34, 40, 49, 255)
FG = '#e4e4e4' # (228, 228, 228, 255)
EXTRA = '#D65A31' # (214, 90, 49, 255)
BLACK = '#000000'

# Each intheshell_

TITLE_1 = '[E]ach'
TITLE_2 = 'InTheShell_'

# Logo
ICON = './assets/catbomb.png'
LOGO_SIZE = 0.35

# Border
BORDER_GAP = 0.02
BORDER_WIDTH = 0.01

### Settings ###

if __name__ == '__main__':

    global width, height
    args = parser.parse_args()
    width, height = args.width, args.height
    user = args.username

    wallpaper = Image.new(mode = "RGBA",
            size = (width, height),
            color = BG)

    img = ImageDraw.Draw(wallpaper)
    write_text(text=TITLE_1, font_size=0.1,
            img=img, top_gap=0.1, left_gap=0.5)
    write_text(text=TITLE_2, font_size=0.1,
            img=img, top_gap=0.1+ 0.05, left_gap=0.5)

    write_text(text=user, font_size=0.05,
            img=img, top_gap=0.85, left_gap=0.5)

    catbomb = Image.open(ICON)

    catbomb = resize_image(ratio=LOGO_SIZE, img=catbomb)

    write_image(wallpaper=wallpaper, img=catbomb, left_gap=0.5, top_gap=0.5)
    wallpaper = write_shadow(wallpaper)

    draw_border(gap=BORDER_GAP, border=BORDER_WIDTH, wallpaper=img, color=BLACK, shadow_gap=0.01)
    draw_border(gap=BORDER_GAP, border=BORDER_WIDTH, wallpaper=img, color=FG)

    wallpaper.save('./assets/wallpaper.png')
